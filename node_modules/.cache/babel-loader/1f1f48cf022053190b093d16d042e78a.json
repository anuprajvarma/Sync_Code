{"ast":null,"code":"var _jsxFileName = \"/Users/anupraj/Documents/Sync_Code/src/components/Editor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport Codemirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editor = _ref => {\n  _s();\n\n  let {\n    socketRef,\n    roomId,\n    onCodeChange\n  } = _ref;\n  const editorRef = useRef(null);\n  useEffect(() => {\n    async function init() {\n      editorRef.current = Codemirror.fromTextArea(document.getElementById('realtimeEditor'), {\n        mode: {\n          name: 'javascript',\n          json: true\n        },\n        theme: 'dracula',\n        autoCloseBrackets: true,\n        autoCloseTags: true,\n        lineNumbers: true\n      });\n      editorRef.current.on('change', (instance, changes) => {\n        //console.log('changes',changes)\n        const {\n          origin\n        } = changes;\n        const code = instance.getValue();\n        onCodeChange(code);\n\n        if (origin !== 'setValue') {\n          socketRef.current.emit('codeChange', {\n            roomId,\n            code\n          });\n        }\n      });\n    }\n\n    init();\n  }, []);\n  useEffect(() => {\n    if (socketRef.current) {\n      socketRef.current.on('codeChange', _ref2 => {\n        let {\n          code\n        } = _ref2;\n        console.log('receving', code);\n\n        if (code !== null) {\n          editorRef.current.setValue(code);\n        }\n      });\n    }\n  }, [socketRef.current]);\n  return /*#__PURE__*/_jsxDEV(\"textarea\", {\n    id: \"realtimeEditor\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Editor, \"ueqoO+5gVAT6IRBF08iN84bYr2g=\");\n\n_c = Editor;\nexport default Editor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","Codemirror","Editor","socketRef","roomId","onCodeChange","editorRef","init","current","fromTextArea","document","getElementById","mode","name","json","theme","autoCloseBrackets","autoCloseTags","lineNumbers","on","instance","changes","origin","code","getValue","emit","console","log","setValue"],"sources":["/Users/anupraj/Documents/Sync_Code/src/components/Editor.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport Codemirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\n\nconst Editor = ({socketRef,roomId, onCodeChange}) => {\n\n    const editorRef = useRef(null);\n\n    useEffect(()=>{\n        async function init(){\n            editorRef.current = Codemirror.fromTextArea(document.getElementById('realtimeEditor'),{\n                mode: {name: 'javascript' , json: true},\n                theme: 'dracula',\n                autoCloseBrackets: true,\n                autoCloseTags: true,\n                lineNumbers: true,\n            })\n\n            editorRef.current.on('change',(instance,changes)=>{\n                //console.log('changes',changes)\n                const {origin}= changes;\n                const code = instance.getValue();\n                onCodeChange(code)\n                if(origin!=='setValue'){\n                    socketRef.current.emit('codeChange',{\n                        roomId,\n                        code,\n                    })\n                } \n            });\n        }\n        init();\n    },[]);\n\n    useEffect(()=>{\n        if(socketRef.current){\n            socketRef.current.on('codeChange',({code})=>{\n                console.log('receving',code)\n                if(code!==null){\n                    editorRef.current.setValue(code);\n                }\n            })\n        }\n    },[socketRef.current])\n\n    return (\n        <textarea id='realtimeEditor'></textarea>\n    )\n}\n\nexport default Editor\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,+BAAP;AACA,OAAO,8BAAP;AACA,OAAO,uCAAP;AACA,OAAO,gCAAP;AACA,OAAO,qCAAP;;;AAEA,MAAMC,MAAM,GAAG,QAAsC;EAAA;;EAAA,IAArC;IAACC,SAAD;IAAWC,MAAX;IAAmBC;EAAnB,CAAqC;EAEjD,MAAMC,SAAS,GAAGN,MAAM,CAAC,IAAD,CAAxB;EAEAD,SAAS,CAAC,MAAI;IACV,eAAeQ,IAAf,GAAqB;MACjBD,SAAS,CAACE,OAAV,GAAoBP,UAAU,CAACQ,YAAX,CAAwBC,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAAxB,EAAkE;QAClFC,IAAI,EAAE;UAACC,IAAI,EAAE,YAAP;UAAsBC,IAAI,EAAE;QAA5B,CAD4E;QAElFC,KAAK,EAAE,SAF2E;QAGlFC,iBAAiB,EAAE,IAH+D;QAIlFC,aAAa,EAAE,IAJmE;QAKlFC,WAAW,EAAE;MALqE,CAAlE,CAApB;MAQAZ,SAAS,CAACE,OAAV,CAAkBW,EAAlB,CAAqB,QAArB,EAA8B,CAACC,QAAD,EAAUC,OAAV,KAAoB;QAC9C;QACA,MAAM;UAACC;QAAD,IAAUD,OAAhB;QACA,MAAME,IAAI,GAAGH,QAAQ,CAACI,QAAT,EAAb;QACAnB,YAAY,CAACkB,IAAD,CAAZ;;QACA,IAAGD,MAAM,KAAG,UAAZ,EAAuB;UACnBnB,SAAS,CAACK,OAAV,CAAkBiB,IAAlB,CAAuB,YAAvB,EAAoC;YAChCrB,MADgC;YAEhCmB;UAFgC,CAApC;QAIH;MACJ,CAXD;IAYH;;IACDhB,IAAI;EACP,CAxBQ,EAwBP,EAxBO,CAAT;EA0BAR,SAAS,CAAC,MAAI;IACV,IAAGI,SAAS,CAACK,OAAb,EAAqB;MACjBL,SAAS,CAACK,OAAV,CAAkBW,EAAlB,CAAqB,YAArB,EAAkC,SAAU;QAAA,IAAT;UAACI;QAAD,CAAS;QACxCG,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBJ,IAAvB;;QACA,IAAGA,IAAI,KAAG,IAAV,EAAe;UACXjB,SAAS,CAACE,OAAV,CAAkBoB,QAAlB,CAA2BL,IAA3B;QACH;MACJ,CALD;IAMH;EACJ,CATQ,EASP,CAACpB,SAAS,CAACK,OAAX,CATO,CAAT;EAWA,oBACI;IAAU,EAAE,EAAC;EAAb;IAAA;IAAA;IAAA;EAAA,QADJ;AAGH,CA5CD;;GAAMN,M;;KAAAA,M;AA8CN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}